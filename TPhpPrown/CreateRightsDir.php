<?php namespace prown;
// PHP7/HTML5, EDGE/CHROME                          *** CreateRightsDir.php ***
// ****************************************************************************
// * TPhpPrown                      Создать каталог (проверить существование) *
// *                                                       и задать его права *
// *                                                                          *
// * v1.0, 11.12.2021                              Автор:       Труфанов В.Е. *
// * Copyright © 2018 tve                          Дата создания:  08.12.2021 *
// ****************************************************************************

// Функция CreateRightsDir создает каталог в файловой системе сервера (сайта) и
// определяет права каталога для пользователя, для его группы и всех остальных:
// на запись, чтение и выполнение. Если каталог уже существует, то функция 
// только выполняет попытку переопределить права. В завершение работы функция 
// сравнивает права, которые установились, с правами, которые должны были 
// установиться. Если желание не совпадает с фактом, то выдается сообщение об 
// ошибке или формируется исключение.
//
// Имя каталога задается по спецификации: имя задается вместе с относительным 
// или абсолютным путем, например:
//
// $imgDir="Gallery";  Здесь явно путь не указан, поэтому новый каталог "Gallery"
// создается в каталоге из которого запущен текущий PHP-сценарий.
//
// $ImgDir=$_SERVER['DOCUMENT_ROOT'].'/Gallery';  Здесь новый каталог "Gallery"
// создается в корневом каталоге сайта.

// Синтаксис:
//
//   $Result=CreateRightsDir($Dir,$modeDir=0777,$ModeError=rvsTriggerError);
//
// Параметры:
//
//   $Dir - спецификация создаваемого каталога, то есть абсолютный или 
//      относительный путь к каталогу и имя каталога;
//   $modeDir - параметр назначения прав каталога. Это восьмеричное число,
//      состоящее из четырех цифр: первая цифра всегда равна нулю (так как 
//      указывает восьмеричное число); вторая цифра указывает разрешения для 
//      владельца каталога; третья цифра указывает разрешения для группы 
//      пользователей владельца; четвертая цифра указывает разрешения для всех 
//      остальных. Возможные значения: 1 = выполнение, 2 = право на запись,
//      4 = разрешения на чтение (суммы значений дают возможность установить
//      несколько разрешений)
//
//      rwx --- ---	 => $modeDir=700, только владелец может входить в этот 
//                      каталог, читать и записывать в него файлы
//
//      rwx r-x r-x	 => $modeDir=755, любой пользователь может входить в этот 
//                      каталог и читать содержимое каталога, но изменять 
//                      содержимое может только владелец
//
//   $ModeError - режим вывода сообщений об ошибке (по умолчанию сообщение 
//      выводится через исключение с пользовательской ошибкой на сайте 
//      doortry.ru)
//
// Возвращаемое значение: 
//
//   $Result - текст сообщения об ошибке (string) при $ModeError=rvsReturn; 
//      false в случае неуспешного выполнения функции;
//      true - в случае успешного выполнения функции 
//
// Зарегистрированные ошибки/исключения:
//   
//   DirСreateError - "Ошибка создания каталога". Функция дополнительно 
//      сбрасывает детальные данные об ошибках в лог-файл (фиксируются следующие
//      события: DirNameIncorrect - "Неверно указано название каталога";
//      NoErrReporting - "Указан оператор @, ошибки отключены";
//   DirRightsNoAssign - "Ошибка назначения прав каталога"; 
//   NoDeterminRights  - "Ошибка определения прав каталога";

require_once 'iniConstMem.php';
require_once 'iniErrMessage.php';
require_once 'MakeUserError.php';
 
// ****************************************************************************
// *       Создать каталог (проверить существование) и задать его права       *
// ****************************************************************************
function CreateRightsDir($Dir,$modeDir=0777,$ModeError=rvsTriggerError)
// https://habr.com/ru/sandbox/124577/  - статья про удаление каталога 
// https://advancedhosters.com/ru/chmod - статья по правам каталога или файла
{
   $Result=true;
   // Если каталога нет, то будем создавать его
   clearstatcache(true,$Dir); // сбросили кэш состояния файла
   if (!is_dir($Dir))
   {
      // Обыгрываем возможные ошибки создания каталога:
      // задаём пользовательский обработчик ошибок, запускаем функцию создания
      // каталога, восстанавливаем прежний обработчик ошибок
      set_error_handler("prown\CreateRightsMkdirHandler");
      $is=mkdir($Dir,$modeDir);
      restore_error_handler();
      // Так как возникла ошибка создания каталога, то выводим сообщение
      if (!$is)
      {
         // Отмечаем ошибку создания каталога - Directory creation error по 
         // одной из причин: а) неправильно указана спецификация каталога 
         // (например, в пути или в названии каталога присутствуют запрещенные 
         // символы); б) ...
         $Result=MakeUserError(DirСreateError.': '.$Dir,'TPhpPrown',$ModeError);
         if ($ModeError<>rvsReturn) $Result=false;
      }
   }
   // Каталог есть, сравниваем заявленные и установленные права
   clearstatcache(true,$Dir); // сбросили кэш состояния файла
   if (is_dir($Dir))
   {
      // Инициируем строковые представления заявленных и установленных прав
      $fPermissions='-1'; $xPermissions='-2';
      // Определяем и сравниваем строки с заявленными и установленными правами
      $is=getFilePerms($Dir,$modeDir,$fPermissions,$xPermissions);
      // Если права совпали, то с успехом завершаем работу
      if ($fPermissions===$xPermissions) 
      {
         // ConsoleLog('Установленные и желаемые права совпали с первого раза');
      }
      // Права не совпали, предполагаем, что находимся в Windows,
      // будем устанавливать права отдельно
      else 
      {
         // Обыгрываем возможные ошибки задания прав каталога:
         set_error_handler("prown\CreateRightsChmodHandler");
         clearstatcache(true,$Dir); // сбросили кэш состояния файла
         $is=chmod($Dir,$modeDir);
         restore_error_handler();
         // Так как возникла ошибка задания прав, то выводим сообщение
         if (!$is)
         {
            $Result=MakeUserError(DirRightsNoAssign.'[onerror]: '.$Dir,'TPhpPrown',$ModeError);
            if ($ModeError<>rvsReturn) $Result=false;
         }
         // Ошибки задания прав нет, поэтому повторно определяем и сравниваем 
         // строки с заявленными и установленными правами
         else
         {
            // Инициируем строковые представления заявленных и установленных прав
            $fPermissions='-3'; $xPermissions='-4';
            // Определяем и сравниваем строки с заявленными и установленными правами
            $is=getFilePerms($Dir,$modeDir,$fPermissions,$xPermissions); 
            // Завершаем работу, если установленные и желаемые права совпадают
            if ($fPermissions===$xPermissions) {}
            // Отмечаем ошибку, если установленные и желаемые права НЕ совпадают
            else 
            {
               ConsoleLog('$fPermissions='.$fPermissions.'  $xPermissions='.$xPermissions);
               $Result=MakeUserError(RightsDonotMatch.': '.
               $fPermissions.'<>'.$xPermissions,'TPhpPrown',$ModeError);
               if ($ModeError<>rvsReturn) $Result=false;
            }
         }
      }
   }   
   return $Result;
}
// ****************************************************************************
// *          Получить строки с установленными и заявленными правами          *
// ****************************************************************************
function getFilePerms($Dir,$modeDir,&$fPermissions,&$xPermissions)
{
   $Result=true;
   // Формируем строку с заявленными правами 
   $xPermissions='0'.sprintf('%o',$modeDir);  
   clearstatcache(true,$Dir);
   // Определяем установленные права и обыгрываем возможные ошибки определения:
   set_error_handler("prown\CreateRightsPermsHandler");
   $permissions=fileperms($Dir);
   restore_error_handler();
   // Так как возникла ошибка определения прав, то выводим сообщение
   if (!$permissions)
   {
      $Result=MakeUserError(NoDeterminRights.'[onerror]: '.$Dir,'TPhpPrown',$ModeError);
      if ($ModeError<>rvsReturn) $Result=false;
   }
   // Формируем строку с установленными правами
   else
   {
      $fPermissions=substr(sprintf('%o',$permissions),-4);
   }
   return $Result;  
}
// ****************************************************************************
// *                 Обыграть возможные ошибки создания каталога              *
// ****************************************************************************
function CreateRightsMkdirHandler($errno,$errstr,$errfile,$errline)
{
   $modul='CreateRightsMkdirHandler';
   // Если error_reporting нулевой, значит, использован оператор @,
   // все ошибки должны игнорироваться
   if (!error_reporting()) 
   {
      putErrorInfo($modul,$errno,
         '['.NoErrReporting.'] '.$errstr,$errfile,$errline);
   }
   else
   {
      // Отлавливаем ошибку "Неверно указано название каталога"
      // "Directory name is incorrect"
      $Find='No such file or directory';
      $Resu=Findes('/'.$Find.'/u',$errstr); 
      if ($Resu==$Find) 
      {
         putErrorInfo($modul,$errno,
            '['.DirNameIncorrect.'] '.$errstr,$errfile,$errline);
      }
      // Обобщаем остальные ошибки
      else 
      {
         putErrorInfo($modul,$errno,
            '['.DirСreateError.'] '.$errstr,$errfile,$errline);
      }
   }
}  
// ****************************************************************************
// *               Обыграть возможные ошибки задания прав каталога            *
// ****************************************************************************
function CreateRightsChmodHandler($errno,$errstr,$errfile,$errline)
{
   putErrorInfo('CreateRightsChmodHandler',$errno,
      '['.DirRightsNoAssign.'] '.$errstr,$errfile,$errline);
}  
// ****************************************************************************
// *            Обыграть возможные ошибки определения прав каталога           *
// ****************************************************************************
function CreateRightsPermsHandler($errno,$errstr,$errfile,$errline)
{
   putErrorInfo('CreateRightsPermsHandler',$errno,
      '['.NoDeterminRights.'] '.$errstr,$errfile,$errline);
}  
// **************************************************** CreateRightsDir.php ***
