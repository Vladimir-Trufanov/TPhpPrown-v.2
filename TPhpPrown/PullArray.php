<?php namespace prown;

// PHP7/HTML5, EDGE/CHROME                                *** PullArray.php ***

// ****************************************************************************
// * TPHPPROWN             Инициализировать/извлечь простой массив из кукиса, *
// *                          обновить из параметров с контролем размерности, *
// *                                  при разрывах порядковых номеров поджать * 
// *                                    и обрезать при превышении размерности *
// *  Параметры контроллировать и при несоответствии размерности не принимать *
// ****************************************************************************

//                                                   Автор:       Труфанов В.Е.
//                                                   Дата создания:  26.02.2018
// Copyright © 2018 tve                              Посл.изменение: 04.04.2018

// Функция работает с "простыми" массивами ("порядковый номер" -> "значение")

// "Проживающие" -             Кукис из                   Параметр 
// оперативный массив          сериализованного массива   с порядковым номером
// $aZhFio[0]='ФОТЕЕВА Н.П.'   $_COOKIE["aZhFio"]         ZhFio0='ФОТЕЕВА Н.П.'
// $aZhFio[1]='СИДОРЕНКО И.М.'                            ZhFio1='СИДОРЕНКО И.М.'

// Режимы работы функции:

// Проинициализировать кукисы оперативным массивом и 
// параметрами, если они есть
define ("arcoCreate",         0);
// Добавить или изменить элементы оперативного массива по кукисам 
// и параметрам    
define ("arcoUpdateOrInsert", 1); 
// Перенести оперативный массив в кукис не изменяя его параметрами
define ("arcoCookie",         3); 

// Предполагается следующия порядок именования:

// Псевдоним массива - отправная точка, соответствует именам параметров.
// Полное имя параметра включает справа порядковый номер в массиве.
// Имя кукиса соответствует имени массива и представляет собой псевдоним с
// добавленной слева маленькой буквой "a".
// Имя параметра для удаления элемента массива представляет собой псевдоним с
// добавленной слева маленькой буквой "d".

// "Категории льгот" -         Кукис из                   Параметр 
// оперативный массив          сериализованного массива   с порядковым номером
// $aZhLgokat[0]=202;          $_COOKIE["aZhLgokat"]      ZhLgokat0=202;
// $aZhLgokat[1]=118;                                     ZhLgokat1=118;

// ****************************************************************************
// *          Поджать и обрезать массив при превышении размерности            *
// ****************************************************************************
function SqueezeArray($Array,$Dim,$Type)
{
    $i=0; 
    $arr=array();
    foreach($Array as $key => $val) 
    {
        $value=MakeType($val,$Type);
        $arr[]=$value; 
        $i++;
        if ($i>=$Dim) break;
    }
    return $arr;
}

// ****************************************************************************
// *                Проверить, входит ли первый массив во второй              *
// ****************************************************************************
function EntryArray($Arr1,$Arr2)
{
    $Result=1; // "все в порядке, 1 массив входит во 2"
    foreach($Arr1 as $key => $value)
    {
        if (!IsSet($Arr2[$key]))
        {
            $Result=0; // "второй массив отличается от первого"
            break;
        }
        elseif (!($Arr2[$key]===$value))
        {
            $Result=0; // "второй массив отличается от первого"
            break;
        }
    }
    return $Result;
}

// ****************************************************************************
// *          Перезаполнить оперативный массив элементами из кукиса           *
// ****************************************************************************
function RemakeArray(&$Array,$CookieName,&$Tag)
{
    $Result=1; // "все в порядке, отработано успешно"
    // Если прообраза массива нет в кукисах, то отмечаем это
    if (!IsSet($_COOKIE[$CookieName]))
    {
        $Tag=$Tag+2; // "кукиса нет, следует переписать кукис массива"
    }
    // Если прообраз массива есть в кукисах, то выбираем его оттуда
    else
    {
        // Вытаскиваем массив
        $Arrin=unserialize($_COOKIE[$CookieName]);
        // Если массивы совпадают, то отмечаем, что кукис переписывать не нужно
        if ((EntryArray($Arrin,$Array))&&(EntryArray($Array,$Arrin)))
        {
            $Tag=$Tag+1; // "массив не изменился, кукис переписывать не нужно"
        }
        // Массивы не совпали, следует переписать кукис
        else
        {
            $Tag=$Tag+4; // "массив изменился, следует переписать кукис массива"
            $Array=$Arrin;
        }
    }
    return $Result;
}

// ****************************************************************************
// *            Если в параметрах передаются значения, отличающиеся от        *
// *              значений в массивах, то меняем значения в массивах          *
// ****************************************************************************
function UpdateFromParm(&$aArray,$RequestName,&$Tag,$Type)
{
    // Трассируем массив  
    // ViewArray($_REQUEST,'$_REQUEST');
    $Result=1; // "все в порядке, отработано успешно"
    // Перебираем параметры, ищем элементы массива и сравниваем 
    foreach($_REQUEST as $key => $val) 
    {
        $value=MakeType($val,$Type);
        // Трассируем выбираемые значения
        // echo '<br>'.'UpdateFromParm: '.$key.'=>'.$value;
        // Отлавливаем параметы массива
        $reg="/^".$RequestName.'\d+'."$/u"; 
        // echo '<br>'.'$reg='.$reg.' ';
        if (preg_match($reg,$key,$matches)) 
        {
            $elem=$matches[0];
            // echo '$elem='.$elem.' ';
            // Выбираем номер элемента массива
            $reg="/".'\d+'."/u"; 
            if (preg_match($reg,$key,$matches)) 
            {
                $num=$matches[0];
                // echo '$num='.$num.' ';
                // Если передаваемого параметра нет в массиве, 
                // то записываем параметр со значением
                if (!(IsSet($aArray[$num])))
                {
                    $aArray[$num]=$value;
                    $Tag=$Tag+8; // "добавлен параметр, следует переписать кукис массива"
                }
                // Проверяем, отличается ли значение параметра от 
                // значения в массиве, при отличии меняем
                else
                {
                    if (!($aArray[$num]==$value)) 
                    {
                        $aArray[$num]=$value;
                        $Tag=$Tag+16; // "изменен элемент массива, следует переписать кукис"
                    }
                }
                // Трассируем массив  
                //echo '$Tag='.$Tag.' ';
                //ViewArray($aArray,'2 a'.$RequestName);
            }
        }
    }
    return $Result;
}

// ****************************************************************************
// *       Инициализировать/извлечь простой массив из кукиса, обновить из     *
// *    параметров с контролем размерности, при разрывах порядковых номеров   *
// * поджать и обрезать при превышении размерности. Параметры контроллировать *
// *                и при несоответствии размерности не принимать             *
// ****************************************************************************
function PullArray(&$Array,$Alias,$Mode,$Type,$MaxCount=1000,&$Tag=0,$CookieName='',$RequestName='',$DeleteName='')

// $Array - уже инициализированный массив
// $Alias - псевдоним массива
// $Mode - режимы работы функции
// $Type - тип элемента простого массива
// $MaxCount - максимальное число элементов массива (по умолчанию 1000)
// $Tag - произвольное значение от ситуации 
// $CookieName - наименование кукиса массива 
// $RequestName - наименование параметра 
// $DeleteName - наименование параметра для удаления элемента массива 

// $Result=0 - "отработано c ошибкой"
// $Result=1 - "все в порядке, отработано успешно"

// $Tag=1 - "массив не изменился, кукис переписывать не нужно"
// $Tag=2 - "кукиса нет, следует переписать кукис массива"
// $Tag=4 - "массив изменился, следует переписать кукис массива"
// $Tag=8 - "добавлен параметр, следует переписать кукис массива"
// $Tag=16  "изменен элемент массива, следует переписать кукис"

{
    // Определяем начальные условия
    $Result=1;        // "все в порядке, отработано успешно"
    $isDelta=False;   // изменений нет, перезаписывать массив в кукисы не нужно
    $NewArr=$Array;   // заготовили рабочий массив

    // Настраиваем имена кукисов и параметров
    if ($CookieName=='') $CookieName='a'.$Alias;
    if ($RequestName=='') $RequestName=$Alias;
    if ($DeleteName=='') $DeleteName='d'.$Alias;
    
    // Если следует проинициализировать кукисы оперативным массивом и 
    // параметрами, то сразу отмечаем это
    if (($Mode==arcoCreate)||($Mode==arcoCookie)) 
    {
        $isDelta=True;
    }
    // Перезаполняем инициализированный массив элементами из кукисов
    elseif ($Mode==arcoUpdateOrInsert) 
    {
        $Result=RemakeArray($NewArr,$CookieName,$Tag);
        // echo '<br>$Tag='.$Tag.' '.'$Result='.$Result;
        if ($Tag>1) $isDelta=True;
    }
    
    // Если в параметрах передаются значения, отличающиеся от значений 
    // в массивах, то меняем значения в массивах 
    if (!($Mode==arcoCookie))
    {
        UpdateFromParm($NewArr,$RequestName,$Tag,$Type);
        // ViewArray($NewArr,'f a'.$RequestName);
        if ($Tag>1) $isDelta=True;
    }        
    
    // Если отличия были, то сохраняем в кукисах сериализованный массив
    // и возвращаем новый оперативный массив
    if ($isDelta)
    {
        // Поджимаем и обрезаем массив при превышении размерности   
        $NewArr=SqueezeArray($NewArr,$MaxCount,$Type);
        // Сериализуем массив и сохраняем в кукисах
        $aVali=serialize($NewArr);
        MakeCookie($CookieName,$aVali);
        // Возвращаем новый оперативный массив
        $Array=$NewArr;
    }

    return $Result;
}
// ********************************************************** PullArray.php ***

